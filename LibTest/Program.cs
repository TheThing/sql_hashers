using System;
using System.Linq;
using System.Text;
using SafeArgon2;

namespace LibTest
{
    internal class Program
    {
        static void Main(string[] args)
        {
            TestArgon2();

            Console.WriteLine("Press any key to close.");

            Console.ReadKey();
        }

        static void TestArgon2()
        {
            var _password = new byte[] {
                0x5a, 0x28, 0x98, 0xa3, 0x45, 0xc7, 0x20, 0x33, 0x5d, 0x64, 0x39, 0x7b, 0x43, 0xdb, 0xfc, 0x0e,
                0xbe, 0xc8, 0x48, 0x4c, 0x7a, 0x9d, 0xf9, 0xb0, 0xc2, 0xbf, 0x50, 0x74, 0x26, 0x75, 0x3b, 0x58,
                0xc8, 0x38, 0xe8, 0xa4, 0x3f, 0x91, 0xc7, 0x3f, 0x94, 0x3e, 0xa3, 0x75, 0xa6, 0x04, 0xf1, 0x54,
                0x89, 0xeb, 0x12, 0x30, 0x57, 0xbc, 0x6d, 0xd3, 0x47, 0x0f, 0x54, 0x33, 0x84, 0x5a, 0x92, 0xb1,
                0x57, 0xfe, 0xaa, 0x83, 0xcf, 0x1c, 0xc9, 0x0a, 0xd3, 0xd4, 0x7a, 0xa3, 0xd8, 0xbc, 0x12, 0xc6,
                0xb4, 0x2c, 0x89, 0xa0, 0x25, 0x2b, 0x7a, 0x0f, 0xb8, 0x5f, 0xa9, 0xe6, 0x70, 0xae, 0xc7, 0x73,
                0x74, 0xd3, 0xc7, 0x55, 0x2b, 0x9f, 0x86, 0xd8, 0xfb, 0xea, 0x03, 0xea, 0xba, 0x4f, 0x02, 0x8d,
                0x03, 0xc4, 0x75, 0x66, 0xeb, 0x6f, 0x1a, 0xd1, 0x77, 0x25, 0x98, 0x84, 0x2d, 0xd1, 0x8e, 0x00
            };

            var _salt = new byte[] {
                0xf7, 0x19, 0x2b, 0xa7, 0xff, 0xb8, 0xca, 0xdc, 0x67, 0x51, 0xed, 0xa0, 0x08, 0x1d, 0x9d, 0x95,
                0x0b, 0x10, 0xe4, 0x32, 0x23, 0xef, 0x30, 0x07, 0x39, 0xc6, 0xbc, 0xad, 0x36, 0xda, 0x08, 0xeb,
                0x03, 0x3b, 0xab, 0x98, 0x32, 0x06, 0x7d, 0x39, 0x6f, 0x81, 0x72, 0x24, 0xff, 0x58, 0x41, 0xe6,
                0x33, 0x5d, 0xf7, 0xe7, 0x56, 0xf7, 0xaf, 0x32, 0xfa, 0xd8, 0x72, 0x78, 0xac, 0x63, 0xda, 0xd1
            };

            var _secret = new byte[] {
                0xb4, 0xe6, 0x04, 0x41, 0xf6, 0x2d, 0xc4, 0x1a, 0xa0, 0x36, 0x9e, 0x2a, 0xa0, 0xbd, 0x1c, 0xce,
                0x93, 0x1c, 0x8d, 0xb7, 0xb7, 0xaf, 0x11, 0x20, 0xba, 0x5e, 0x99, 0xfc, 0xff, 0xd6, 0xb1, 0x04,
                0x00, 0x55, 0x5b, 0xb0, 0x35, 0x80, 0x43, 0x2e, 0xbf, 0xc7, 0x10, 0x06, 0xe3, 0x04, 0x68, 0xe8,
                0x10, 0xa7, 0x95, 0xb5, 0xd1, 0x02, 0x84, 0x49, 0x4c, 0x22, 0x34, 0x05, 0x90, 0x48, 0x90, 0x4a
            };

            var _ad = new byte[] { 0x4b, 0x53, 0x7c, 0xa5, 0xe0, 0x2b, 0xe4, 0x06, 0xce, 0x9e, 0x9e, 0xa3, 0x27, 0x9c, 0x6e, 0x26 };

            var expected = new byte[]
            {
                0x23, 0x95, 0x3a, 0x0e, 0x1d, 0x02, 0x8f, 0x25, 0x52, 0x0a, 0xa2, 0xf9, 0x6f, 0xc0, 0xcc, 0x9d,
                0x41, 0xc1, 0x8c, 0x8d, 0xf2, 0x15, 0x5d, 0x85, 0x8a, 0x4b, 0x46, 0x0b, 0x14, 0xcd, 0xa7, 0xa4,
                0x7f, 0xe3, 0xb3, 0x16, 0x81, 0x9d, 0x93, 0xf5, 0x7e, 0x98, 0xe2, 0x58, 0x89, 0x17, 0x5e, 0x88,
                0x11, 0xfc, 0xac, 0xe8, 0x67, 0xd4, 0xd8, 0x77, 0x4f, 0x76, 0xcf, 0x20, 0x46, 0x65, 0x47, 0xaa,
                0x48, 0x7e, 0xea, 0xc4, 0x20, 0xe6, 0x51, 0xb2, 0x14, 0x93, 0xde, 0x85, 0xb1, 0x8a, 0xd8, 0xce,
                0x27, 0x9b, 0xa1, 0x5d, 0x00, 0x86, 0x65, 0x7d, 0xbb, 0xbc, 0x03, 0x86, 0x85, 0xf2, 0xb4, 0x55,
                0xcd, 0xbe, 0x47, 0xf0, 0x26, 0xed, 0x5e, 0x12, 0x3b, 0x2d, 0xf5, 0xe8, 0x01, 0x0e, 0x8e, 0xf9,
                0xfc, 0x37, 0x96, 0x34, 0x78, 0x73, 0xf8, 0x27, 0xc6, 0x17, 0xda, 0x5c, 0x90, 0x29, 0xe6, 0xf3,
                0xd1, 0xb8, 0x17, 0x3b, 0x34, 0xf5, 0xfd, 0xde, 0x2e, 0x25, 0x8d, 0x41, 0xd6, 0x7d, 0x7b, 0x8e,
                0xe0, 0x19, 0x14, 0x5a, 0x54, 0xb4, 0x15, 0xba, 0x11, 0x0a, 0xf1, 0x0d, 0x60, 0xdd, 0x62, 0x6a,
                0xc0, 0x9c, 0x24, 0x1c, 0xaf, 0x61, 0x94, 0x65, 0xe1, 0x4d, 0x50, 0x35, 0xa2, 0x7d, 0xc4, 0x21,
                0x85, 0xe2, 0x02, 0x25, 0x9f, 0xce, 0x62, 0xfc, 0x9e, 0x55, 0x1b, 0xa7, 0x33, 0x47, 0xd5, 0xe9,
                0x70, 0xb5, 0x5f, 0x05, 0x71, 0x80, 0x45, 0x2b, 0x44, 0x74, 0x42, 0xb4, 0xc6, 0xa3, 0x14, 0x33,
                0xac, 0x35, 0xf9, 0x5a, 0x5c, 0x56, 0xc2, 0x66, 0x07, 0xe2, 0x0c, 0xe0, 0x6c, 0xf5, 0x86, 0xe6,
                0x79, 0x45, 0x57, 0x9f, 0xc8, 0x3b, 0x52, 0x2f, 0x67, 0x4b, 0x22, 0x0c, 0xe2, 0x14, 0xa0, 0x93,
                0x05, 0x27, 0x25, 0xbd, 0x55, 0xdd, 0xb9, 0xa9, 0x6b, 0xa5, 0x4c, 0x0e, 0x5c, 0x76, 0x33, 0x0c,
                0x0d, 0xc3, 0x49, 0x12, 0xff, 0x4f, 0x52, 0xb4, 0xb3, 0xec, 0x84, 0xed, 0x3c, 0x5e, 0x28, 0x59,
                0x88, 0x30, 0x8e, 0x1a, 0x34, 0x02, 0x17, 0xaf, 0x73, 0xe7, 0x3e, 0x28, 0xaa, 0xef, 0xdf, 0xae,
                0x2b, 0xb1, 0xb7, 0xe2, 0xca, 0x6b, 0xbf, 0x14, 0x3d, 0xda, 0x74, 0x38, 0x20, 0x8b, 0x53, 0xd3,
                0x65, 0xc3, 0xed, 0x8b, 0x30, 0x46, 0x42, 0x6e, 0xe0, 0x12, 0x78, 0xdb, 0xed, 0xa3, 0xf0, 0xca,
                0xbb, 0x29, 0xd6, 0x00, 0x88, 0xc7, 0xc1, 0xc6, 0x47, 0x0c, 0x2b, 0xe0, 0x6f, 0x04, 0x25, 0x11,
                0xaa, 0xbf, 0x42, 0xfe, 0x30, 0xad, 0xcd, 0xeb, 0x52, 0x3d, 0x92, 0x4e, 0x6d, 0xb7, 0xdf, 0xe0,
                0xe6, 0x32, 0xfd, 0x0d, 0x1b, 0xe8, 0x91, 0x03, 0x09, 0x01, 0x2c, 0x04, 0x8f, 0xb9, 0xe5, 0xd9,
                0xb7, 0xdf, 0xdb, 0xbd, 0xda, 0x0a, 0x79, 0x88, 0x18, 0x79, 0x14, 0xbb, 0xf6, 0x61, 0x4b, 0x31,
                0x1c, 0x4e, 0x19, 0x89, 0x4e, 0x6e, 0xf4, 0x23, 0xa6, 0xf6, 0x23, 0x2f, 0x08, 0xed, 0xa9, 0xc6,
                0xee, 0x6c, 0x23, 0x6a, 0x48, 0xe7, 0x33, 0x59, 0x98, 0xfc, 0x2c, 0x7f, 0x87, 0x98, 0x4c, 0xf9,
                0x17, 0x30, 0xd2, 0x07, 0x08, 0x8d, 0x44, 0x85, 0xd1, 0xb0, 0xf1, 0x09, 0x26, 0x71, 0x8a, 0x99,
                0x29, 0x76, 0x65, 0xb4, 0x05, 0x04, 0x61, 0xd3, 0x8c, 0x85, 0x5e, 0x68, 0xef, 0xe5, 0x52, 0x54,
                0xd8, 0xda, 0x9d, 0xf2, 0xe6, 0x06, 0x77, 0x61, 0xef, 0x3e, 0x4f, 0xa4, 0xdd, 0x07, 0x4a, 0x0f,
                0x51, 0x71, 0xcf, 0xfc, 0xd9, 0xbd, 0x92, 0xa5, 0x90, 0x8c, 0x80, 0x0a, 0xd7, 0x86, 0x80, 0x23,
                0x17, 0x44, 0xd5, 0xa5, 0x2d, 0xd2, 0xc8, 0x72, 0x13, 0x54, 0x4c, 0x2f, 0x6e, 0xf1, 0x6e, 0x5c,
                0x49, 0x3d, 0x2c, 0x35, 0x80, 0x0d, 0xa9, 0x76, 0x4c, 0xd8, 0xcb, 0x1b, 0x4e, 0xba, 0x7e, 0xb0
            };

            Argon2id hashAlgo = new Argon2id(_password);

            hashAlgo.AssociatedData = _ad;
            hashAlgo.DegreeOfParallelism = 16;
            hashAlgo.Iterations = 15;
            hashAlgo.KnownSecret = _secret;
            hashAlgo.MemorySize = 4096;
            hashAlgo.Salt = _salt;

            int numIterations = 10;
#if DEBUG
            Console.WriteLine("Testing \"Safe Argon2id\" in Debug mode, number of iterations: " + numIterations);
#else
            Console.WriteLine("Testing \"Safe Argon2id\" in Release mode, number of iterations: " + numIterations);
#endif
            byte[] actual = null;

            var startTime = DateTime.Now;

            for (int i = 0; i < numIterations; i++)
            {
                actual = hashAlgo.GetBytes(512);
            }

            var timeDeltaMS = (DateTime.Now - startTime).TotalMilliseconds;

            Console.WriteLine("Argon2id algo average execution time: " + timeDeltaMS / numIterations + " ms");

            if (!AreEqual(expected, actual))
            {
                Console.WriteLine("Something is wrong.");
            }
        }

        static void TestBlake2()
        {
            BLAKE2b hashFunc = new BLAKE2b(512);

            var data = hashFunc.ComputeHash(Encoding.UTF8.GetBytes("Hello"));

            if (!AreEqual(new byte[] {
                0xef, 0x15, 0xea, 0xf9, 0x2d, 0x5e, 0x33, 0x53, 0x45, 0xa3, 0xe1, 0xd9, 0x77, 0xbc, 0x7d, 0x87,
                0x97, 0xc3, 0xd2, 0x75, 0x71, 0x7c, 0xc1, 0xb1, 0x0a, 0xf7, 0x9c, 0x93, 0xcd, 0xa0, 0x1a, 0xeb,
                0x2a, 0x0c, 0x59, 0xbc, 0x02, 0xe2, 0xbd, 0xf9, 0x38, 0x0f, 0xd1, 0xb5, 0x4e, 0xb9, 0xe1, 0x66,
                0x90, 0x26, 0x93, 0x0c, 0xcc, 0x24, 0xbd, 0x49, 0x74, 0x8e, 0x65, 0xf9, 0xa6, 0xb2, 0xee, 0x68 },
                data))
            {
                Console.WriteLine("Something is wrong.");
            }
        }

        static bool AreEqual(byte[] a, byte[] b)
        {
            return a != null && b != null && a.SequenceEqual(b);
        }
    }
}
